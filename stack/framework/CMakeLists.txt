#Export the interface of the HAL to the rest of the code base
GLOBAL_INCLUDE_DIRECTORIES("inc")

#Export the 'binary' platform directory so the 'framework_defs.h' file
#generated by FRAMEWORK_BUILD_SETTINGS file can be found
GLOBAL_INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

#Include framework-specific helper MACRO's
include(${CMAKE_SOURCE_DIR}/cmake/framework_macros.cmake)

#add the hal
ADD_SUBDIRECTORY("hal")
#add the non-hal components
ADD_SUBDIRECTORY("components")

#Add framework options && import them in the framework_defs.h file
#This is NOT done seperately for each component since components can be overridden by a platform
#And these settings should not be
SET(FRAMEWORK_SCHEDULER_MAX_TASKS "64" CACHE STRING "The maximum number of tasks that can be registered with the scheduler")
FRAMEWORK_HEADER_DEFINE(NUMBER FRAMEWORK_SCHEDULER_MAX_TASKS)

SET(FRAMEWORK_SCHEDULER_LP_MODE "0" CACHE STRING "The low power mode to use. Only change this if you know exactly what you are doing")
FRAMEWORK_HEADER_DEFINE(NUMBER FRAMEWORK_SCHEDULER_LP_MODE)

SET(FRAMEWORK_LOG_BINARY "FALSE" CACHE BOOL "Use binary logging (where availabe)")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_LOG_BINARY)

SET(FRAMEWORK_LOG_ENABLED "TRUE" CACHE BOOL "Select whether to enable or disable the generation of logs")
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_LOG_ENABLED)

SET(FRAMEWORK_TIMER_STACK_SIZE "20" CACHE STRING "The number of simultaneous timer events that can be scheduled. Increase this if you have lots of concurrent timers")
FRAMEWORK_HEADER_DEFINE(NUMBER FRAMEWORK_TIMER_STACK_SIZE)

SET(FRAMEWORK_TIMER_RESOLUTION "1MS" CACHE STRING "The frequency of the framework timer. One of '1MS' (1024 ticks per second) or '32K' (32768 ticks per second)")
SET_PROPERTY( CACHE FRAMEWORK_TIMER_RESOLUTION PROPERTY STRINGS "1MS;32K")
FRAMEWORK_HEADER_DEFINE(ID FRAMEWORK_TIMER_RESOLUTION)

SET(FRAMEWORK_TIMER_MODE "Reset" CACHE STRING "The operation mode of the framework timer. One of 'Normal' or 'Reset'")
SET_PROPERTY( CACHE FRAMEWORK_TIMER_MODE PROPERTY STRINGS "Normal;Reset")
IF(FRAMEWORK_TIMER_MODE STREQUAL "Reset")
    SET(FRAMEWORK_TIMER_RESET_COUNTER "TRUE")
ELSE()
    SET(FRAMEWORK_TIMER_RESET_COUNTER "FALSE")
ENDIF()
FRAMEWORK_HEADER_DEFINE(BOOL FRAMEWORK_TIMER_RESET_COUNTER)

#Generate the 'framework_defs.h'
FRAMEWORK_BUILD_SETTINGS_FILE()

SET(FRAMEWORK_SOURCES framework_bootstrap.c)
# Assemble the library
# PLATFORM_CHIP_LIBS: Object libraries of individual chips
# PLATFORM: Object library of the platform itself
# FRAMEWORK_OVERRIDE_LIBS: non-hal object libraries that were overridden by the HAL
# FRAMEWORK_LIBS: non-hal object libraries (not overridden)
SET(LIBNAMES ${PLATFORM_CHIP_LIBS} "PLATFORM" ${FRAMEWORK_OVERRIDE_LIBS} ${FRAMEWORK_LIBS})

#Some wizardry to get ADD_LIBRARY to accept everything
FOREACH(libname ${LIBNAMES})
    LIST(APPEND LIBS "$<TARGET_OBJECTS:${libname}>")
ENDFOREACH()
#AND finally add the library
ADD_LIBRARY(framework STATIC ${LIBS} ${FRAMEWORK_SOURCES})
