#Check that the correct toolchain for the platform is being used
REQUIRE_TOOLCHAIN(gcc-arm-embedded)

#Define platform specific options
PLATFORM_PARAM(${PLATFORM_PREFIX}_MCU "EFM32GG990F1024" STRING "The MCU of the Gecko board")
PLATFORM_PARAM(${PLATFORM_PREFIX}_RADIO "none" STRING "The radio chip connected to the Gecko board")
PLATFORM_PARAM(${PLATFORM_PREFIX}_UART_BAUDRATE "115200" STRING "The baudrate used by the UART port")
#Restrict the number of possible options for the radio option in the usual manner...
SET_PROPERTY(CACHE ${PLATFORM_PREFIX}_RADIO PROPERTY STRINGS "cc1101;none")

#Add a 'global' definition for the specific MCU
ADD_GLOBAL_DEFINITIONS("-D${${PLATFORM_PREFIX}_MCU}")

#Make the 'inc' directory available so 'platform.h' can be found
GLOBAL_INCLUDE_DIRECTORIES(inc)

#Make the 'binary platform dir' available so the 'platform_defs.h' file
#(Generated by PLATFORM_BUILD_SETTINGS_FILE) can be found
GLOBAL_INCLUDE_DIRECTORIES("${CMAKE_CURRENT_BINARY_DIR}")

#Set platform specific compile & linker options
INSERT_COMPILE_FLAGS(AFTER "-gdwarf-2" "-mcpu=cortex-m3" "-mthumb" "-fmessage-length=0" "-mno-sched-prolog" "-fno-builtin" "-ffunction-sections" "-fdata-sections")

#Add platform specific linker flags
INSERT_LINKER_FLAGS(BEFORE OBJECTS FLAGS "--specs=nano.specs" "-Wl,-gc-sections")
INSERT_LINKER_FLAGS(BEFORE LINK_LIBRARIES FLAGS "-Wl,--start-group -lgcc -lc")
INSERT_LINKER_FLAGS(AFTER LINK_LIBRARIES FLAGS "-lnosys -Wl,--end-group")

#Include the sources for the efm32gg chip
ADD_CHIP("efm32gg")

#Include the sources for the radio chip, if needed
IF(NOT ("${${PLATFORM_PREFIX}_RADIO}" STREQUAL "none"))
    ADD_CHIP(${PLATFORM_PREFIX}_RADIO)
ENDIF()


PLATFORM_HEADER_DEFINE(NUMBER ${PLATFORM_PREFIX}_UART_BAUDRATE)

#Build the 'platform_defs.h' settings file
PLATFORM_BUILD_SETTINGS_FILE()


#Define the 'platform library'. Every platform must define a 'PLATFORM' object library
ADD_LIBRARY(PLATFORM OBJECT platform_main.c platform_leds.c libc_overrides.c)
