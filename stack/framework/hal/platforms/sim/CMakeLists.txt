#Require no toolchain (as in: generate error if toolchain file is used)
REQUIRE_TOOLCHAIN("")

#Define platform specific options
PLATFORM_PARAM(${PLATFORM_PREFIX}_OMNETPP_DIR "-NOTFOUND" PATH "The directory containing the Omnet++ Files")
PLATFORM_PARAM(${PLATFORM_PREFIX}_OMNETPP_CONFIG "debug" STRING "The Omnet++ configuration to use. One of 'debug' or 'release'")
SET_PROPERTY(CACHE ${PLATFORM_PREFIX}_OMNETPP_CONFIG PROPERTY STRINGS "debug;release")
PLATFORM_PARAM(${PLATFORM_PREFIX}_MAX_NODES "100" STRING "The maximum number of parallel nodes to support")

#Make the 'inc' directory available so 'platform.h' can be found
GLOBAL_INCLUDE_DIRECTORIES(inc)

#Make the 'binary platform dir' available so the 'platform_defs.h' file
#(Generated by PLATFORM_BUILD_SETTINGS_FILE) can be found
GLOBAL_INCLUDE_DIRECTORIES("${CMAKE_CURRENT_BINARY_DIR}")

INSERT_CXX_FLAGS(AFTER "-std=c++11")

#Add additional definitions to the 'platform_defs.h' file generated by cmake
PLATFORM_HEADER_DEFINE(NUMBER ${PLATFORM_PREFIX}_MAX_NODES)

#Build the 'platform_defs.h' settings file
PLATFORM_BUILD_SETTINGS_FILE()


#And now for the fun 'sim specific' stuff

#Start building a list of include directories for all castalia sources
LIST_SUBDIRS(CASTALIA_INC "${CMAKE_CURRENT_SOURCE_DIR}" RECURSE)

#Find and process all '.msg'. files so the propper Omnet++ message headers / sources are generated
FILE(GLOB_RECURSE MSG_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/castalia/src/*.msg")
SET(MSG_SOURCES "")
FOREACH(msg_file ${MSG_FILES})
    #retrieve the raw file prefix & directory prefix from the file name
    GET_FILENAME_COMPONENT(msg_prefix "${msg_file}" NAME_WE)
    GET_FILENAME_COMPONENT(msg_dir "${msg_file}" DIRECTORY)
    
    #Build a dir in the binary dir to store the generated msg files in
    FILE(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/${msg_dir}")
    #And add that dir to the list of directories to be included
    LIST(APPEND CASTALIA_INC "${CMAKE_CURRENT_BINARY_DIR}/${msg_dir}")
    
    #This tells cmake to copy the 'msg' file to the binary dir whenever it is updated
    #This is neede because we can't tell opp_msgc to store the generated sources
    #Somewhere different than where the '.msg' file is located
    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${msg_dir}/${msg_prefix}.msg 
		   ${CMAKE_CURRENT_BINARY_DIR}/${msg_dir}/${msg_prefix}.msg
		   COPYONLY)

    #This tells cmake how the message headers & sources can be generated from the '.msg' files
    #Basically: by running opp_msgc
    ADD_CUSTOM_COMMAND(OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${msg_dir}/${msg_prefix}_m.cc" "${CMAKE_CURRENT_BINARY_DIR}/${msg_dir}/${msg_prefix}_m.h"
		       COMMAND env PATH="$ENV{PATH}:${PLATFORM_SIM_OMNETPP_DIR}/bin" opp_msgc -s _m.cc ${CMAKE_CURRENT_BINARY_DIR}/${msg_dir}/${msg_prefix}.msg		       
		       WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
		       DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/${msg_dir}/${msg_prefix}.msg")

    #Finally: add the generated source file to the list of msg files so we can later add them to a compile 
    #target
    LIST(APPEND MSG_SOURCES ${CMAKE_CURRENT_BINARY_DIR}/${msg_dir}/${msg_prefix}_m.cc)
ENDFOREACH()

#Tell cmake which directories to include to build all castalia sources
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}
		    ${${PLATFORM_PREFIX}_OMNETPP_DIR}/include
		    ${CASTALIA_INC})

#Define the sources for the 'PLATFORM' object library
FILE(GLOB_RECURSE PLATFORM_SOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/castalia/src/*.cc")
LIST(APPEND PLATFORM_SOURCES atomic.cc
			     hwdebug.cc
			     hwleds.cc
			     hwradio.cc
			     hwspi.cc
			     hwsystem.cc
			     hwtimer.cc
			     hwuart.cc
			     hwgpio.cc
			     sim_utils.cc)

#Define the sources for the overridden framework components
SET(TIMER_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/timer/timer.cc")
SET(SCHEDULER_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/scheduler/scheduler.cc")
SET(LOG_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/log/log.cc")
SET(RANDOM_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/random/random.cc")

#Tell CMAKE that the 'cc' files in this directory are C++ files
SET_SOURCE_FILES_PROPERTIES(${PLATFORM_SOURCES} 
			    ${MSG_SOURCES} 
			    ${TIMER_SOURCES}
			    ${SCHEDULER_SOURCES}
			    ${LOG_SOURCES}
			    ${RANDOM_SOURCES}
			    PROPERTIES LANGUAGE CXX)
MESSAGE(STATUS "System name: ${CMAKE_SYSTEM_NAME}")
IF(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
    INSERT_LINKER_FLAGS(BEFORE OBJECTS INSERT "-Wl,-rpath,${${PLATFORM_PREFIX}_OMNETPP_DIR}/lib" "-Wl,-rpath,.")
    INSERT_LINKER_FLAGS(AFTER LINK_LIBRARIES INSERT "-Wl,-all_load" 
					 "-L${${PLATFORM_PREFIX}_OMNETPP_DIR}/lib"
					 "-loppmaind"
					 "-Wl,-u,_cmdenv_lib"
					 "-loppcmdenvd"
					 "-loppenvird" 
					 "-loppsimd" 
					 "-lstdc++")
ELSEIF(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    INSERT_LINKER_FLAGS(BEFORE OBJECTS INSERT "-Wl,-rpath,${${PLATFORM_PREFIX}_OMNETPP_DIR}/lib" "-Wl,-rpath,.")
    INSERT_LINKER_FLAGS(AFTER LINK_LIBRARIES INSERT "-Wl,--no-as-needed"
						    "-Wl,--whole-archive" 
						    "-Wl,--no-whole-archive" 
						    "-L${${PLATFORM_PREFIX}_OMNETPP_DIR}/lib"
						    "-loppmaind" 
						    "-Wl,-u,_cmdenv_lib" 
						    "-Wl,--no-as-needed" 
						    "-loppcmdenv" 
						    "-loppenvir" 
						    "-loppsim" 
						    "-ldl "
						    "-lstdc++")
ELSE()
    MESSAGE(FATAL_ERROR "Host OS '${CMAKE_SYSTEM_NAME}' not supported for the 'sim' platform")
ENDIF()
	    
#Define the 'platform library'. 
ADD_LIBRARY(PLATFORM OBJECT ${PLATFORM_SOURCES} ${MSG_SOURCES})

#Override the framework components
OVERRIDE_COMPONENT(timer ${TIMER_SOURCES})
OVERRIDE_COMPONENT(scheduler ${SCHEDULER_SOURCES})
OVERRIDE_COMPONENT(log ${LOG_SOURCES})
OVERRIDE_COMPONENT(random ${RANDOM_SOURCES})

