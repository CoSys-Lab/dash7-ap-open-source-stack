<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>OSS-7 News</title><link href="http://cosys-lab.github.io/dash7-ap-open-source-stack/" rel="alternate"></link><link href="http://cosys-lab.github.io/dash7-ap-open-source-stack/feeds/glenn-ergeerts.atom.xml" rel="self"></link><id>http://cosys-lab.github.io/dash7-ap-open-source-stack/</id><updated>2014-08-28T12:00:00+02:00</updated><entry><title>Live capturing of DASH7 traffic in wireshark</title><link href="http://cosys-lab.github.io/dash7-ap-open-source-stack/live-capturing-of-dash7-traffic-in-wireshark.html" rel="alternate"></link><updated>2014-08-28T12:00:00+02:00</updated><author><name>Glenn Ergeerts</name></author><id>tag:cosys-lab.github.io,2014-08-28:dash7-ap-open-source-stack/live-capturing-of-dash7-traffic-in-wireshark.html</id><summary type="html">&lt;p&gt;As promised in the &lt;a href="http://cosys-lab.github.io/dash7-ap-open-source-stack/how-to-analyze-dash7-traffic-in-wireshark.html"&gt;previous post&lt;/a&gt; we will show how to do live capturing in wireshark instead of reading from a previous captured file. Instead of dumping the PCAP data to a regular file the logger writes the data to a named pipe and wireshark reads from this named pipe. As a prerequisite, make sure the setup of the &lt;a href="http://cosys-lab.github.io/dash7-ap-open-source-stack/how-to-analyze-dash7-traffic-in-wireshark.html"&gt;previous post&lt;/a&gt; is functional, since we will be building on top of this. &lt;/p&gt;
&lt;p&gt;When the d7-oss-logger.py script is started with the &lt;code&gt;-p&lt;/code&gt; parameter it will dump the received traffic to a named pipe. The filename of this named pipe depends on the OS you are running, for POSIX systems this is &lt;code&gt;/tmp/oss7-pipe&lt;/code&gt;, for MS Windows this is &lt;code&gt;\\.\pipe\oss7-pipe&lt;/code&gt;.
The logger will create the named pipe and wait for a client connection (by wireshark in our case) before it writes data to it.
When wireshark conencts the logger will first transmit the PCAP header, followed by the subsequent frames which are received.
It is possible to stop listening in wireshark and reconnect later.&lt;/p&gt;
&lt;p&gt;Now, how to configure wireshark to use this named pipe? We add the named pipe 'interface' by choosing &lt;code&gt;Capture &amp;gt; Options ... &amp;gt; Manage Interfaces &amp;gt; New&lt;/code&gt; and filling in the pipe filename mentioned above in the &lt;code&gt;Pipe&lt;/code&gt; field. The named pipe should appear in the interface list, and you can now start listening on it.&lt;/p&gt;
&lt;p&gt;One caveat to keep in mind is that when you quit the logger while capturing in wireshark you will need to restart the capture in wireshark again after restarting the logger. 
Being able to start the logger from within wiresharj would make the integration easier, but this is not possible in wireshark currently. However, there is a &lt;a href="http://sharkfest.wireshark.org/sharkfest.13/presentations/NAP-11_Expanding-Wireshark-Beyond-Ethernet-and-Network-Interfaces_Kershaw-Ryan.pdf"&gt;proposal&lt;/a&gt; which might enable this in the future.&lt;/p&gt;
&lt;p&gt;Happy capturing!&lt;/p&gt;</summary><category term="Tools"></category></entry><entry><title>How to analyze DASH7 traffic in wireshark</title><link href="http://cosys-lab.github.io/dash7-ap-open-source-stack/how-to-analyze-dash7-traffic-in-wireshark.html" rel="alternate"></link><updated>2014-08-13T16:00:00+02:00</updated><author><name>Glenn Ergeerts</name></author><id>tag:cosys-lab.github.io,2014-08-13:dash7-ap-open-source-stack/how-to-analyze-dash7-traffic-in-wireshark.html</id><summary type="html">&lt;p&gt;In this post we assume you already have a OSS-7 powered node running and are able to get the log information using the tools/PyLogger/d7-oss-logger.py script. The OSS-7 stack running on the node needs to be built with LOG_PHY_ENABLED defined, in order to receive the raw packet data.&lt;/p&gt;
&lt;p&gt;When the d7-oss-logger.py script is started with the &lt;code&gt;-f [file]&lt;/code&gt; parameter it will dump the received traffic to the specified file in the PCAP format (the file format used by wireshark).&lt;/p&gt;
&lt;p&gt;Next we need to configure wireshark to correctly dissect this file. Since wireshark obviously does not know about the OSS-7 and DASH7 packet structure we will need to add a dissector plugin which adds support for parsing the DASH7 packets.
This plugin is provided in the form of a lua script and can be found in the OSS-7 repository in the &lt;code&gt;tools/wireshark-dissector/&lt;/code&gt; directory. Next we need to tell wireshark to use this script. This can be done by calling the script from the init.lua script by adding the following line:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;dofile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;PATH-TO-OSS7&amp;gt;/tools/wireshark-dissector/oss7-wireshark-dissector.lua&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The init.lua script can found in &lt;code&gt;$HOME/.wireshark/init.lua&lt;/code&gt; on linux or &lt;code&gt;C:\Program Files\Wireshark&lt;/code&gt; on Windows.&lt;/p&gt;
&lt;p&gt;As a final step we need to configure wireshark to use this dissector. This is done by coupling the User 0 link layer type (which the logger uses to write the PCAP file) to the protocol dissector for DASH7. 
To do this select &lt;code&gt;Edit &amp;gt; Preferences &amp;gt; Protocols &amp;gt; DLT_USER &amp;gt; Edit &amp;gt; New&lt;/code&gt;. 
Fill in the dialog like in the screenshot below and press OK.
&lt;img alt="DLT" src="http://cosys-lab.github.io/dash7-ap-open-source-stack/images/dlt.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now you should be able to analyze DASH7 packets by loading a PCAP file captured with the logger tool. This is shown in the screenshot below.
&lt;img alt="wireshark dissector" src="http://cosys-lab.github.io/dash7-ap-open-source-stack/images/wireshark-dissector.png" /&gt;&lt;/p&gt;
&lt;p&gt;The dissector does not yet support the full protocol however. This will be implemented in parallel with the stack itself.
As long as you use the same git revision for the stack and for the dissector script you should be fine.&lt;/p&gt;
&lt;p&gt;In a future post we will explain how to go one step further and do live tracing of packets in wireshark instead of reading from a previously captured file.&lt;/p&gt;</summary><category term="Tools"></category></entry><entry><title>Welcome to our new site!</title><link href="http://cosys-lab.github.io/dash7-ap-open-source-stack/welcome-to-our-new-site.html" rel="alternate"></link><updated>2014-06-17T16:00:00+02:00</updated><author><name>Glenn Ergeerts</name></author><id>tag:cosys-lab.github.io,2014-06-17:dash7-ap-open-source-stack/welcome-to-our-new-site.html</id><summary type="html"></summary><category term="General"></category></entry></feed>